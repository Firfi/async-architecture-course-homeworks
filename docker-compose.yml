version: '3'

services:
  auth-kafka-adapter:
    depends_on:
      fiefsetup:
        condition: service_started
    build:
      context: .
      dockerfile: kafka-adapter.Dockerfile
    ports:
      - '3000:3000'
    environment:
      - KAFKA_BROKERS=kafka:9092
      - HOST=0.0.0.0
    networks:
      default:
        # it has to LOOK LIKE AN URL otherwise fief isnt motivated at all.
        aliases:
          - fief-fuckery.what
  fief:
    image: ghcr.io/fief-dev/fief:latest
    container_name: fief
    ports:
      - '8000:8000'
    environment:
      - SECRET=fba05GykCb4Kcgcwwh5pyKMKY6ChyRjp1_CJNijtPgCt-kIqzu8LNLsiTVn2EiKiSOf-hmEvb1AiXCO4yX4RAw
      - FIEF_CLIENT_ID=GNggKmhPlgowVLktPFRRgiAbOh1JfyY0POXmvIa5kE4
      - FIEF_CLIENT_SECRET=dp6H8D1gPmdEA4gxd7izO0KDAp9JAbgQswxwTdGQrQo
      - ENCRYPTION_KEY=cDo1G3lJW_ujsupIP9bQQAAp1CF-e40RlpfelklL45Y=
      - FIEF_MAIN_ADMIN_API_KEY=ACAB
      - PORT=8000
      - ROOT_DOMAIN=localhost:8000
      - FIEF_DOMAIN=localhost:8000
      - FIEF_MAIN_USER_EMAIL=admin@popug.io
      - FIEF_MAIN_USER_PASSWORD=admin@popug.io
      - CSRF_COOKIE_SECURE=False
      - SESSION_DATA_COOKIE_SECURE=False
      - USER_LOCALE_COOKIE_SECURE=False
      - LOGIN_HINT_COOKIE_SECURE=False
      - LOGIN_SESSION_COOKIE_SECURE=False
      - REGISTRATION_SESSION_COOKIE_SECURE=False
      - SESSION_COOKIE_SECURE=False
      - FIEF_ADMIN_SESSION_COOKIE_SECURE=False

  fiefsetup:
    build:
      context: .
      dockerfile: fiefsetup.Dockerfile
    depends_on:
      fief:
        condition: service_started
    restart: 'no'
    network_mode: host
    entrypoint:
      - '/bin/sh'
      - '-c'
      - |
        until curl --output /dev/null --silent --head --fail http://localhost:8000/admin/api/docs; do
          printf '.'
          sleep 5
        done
        echo "API is up, setting up roles..."
        curl \
          -X POST \
          -H "Authorization: Bearer ACAB" \
          -H "Content-Type: application/json" \
          -d '{
            "name": "Role",
            "slug": "role",
            "type": "CHOICE",
            "configuration": {
              "at_registration": false,
              "required": true,
              "at_update": false,
              "choices": [
                ["admin", "Admin"],
                ["worker", "Worker"],
                ["manager", "Manager"],
                ["accountant", "Accountant"]
              ],
              "default": "worker"
            }
          }' \
        http://localhost:8000/admin/api/user-fields/ && echo "\n"
        echo "About to get webhooks..."
        webhooksResponse=$(curl -s -H "Accept: application/json" \
                                                 -H "Authorization: Bearer ACAB" \
                                                 http://localhost:8000/admin/api/webhooks/ || echo "Curl error: $?")
        webhookCount=$(echo $$webhooksResponse | jq '.count')
        if [ -z "$$webhookCount" ] || ! [ "$$webhookCount" -eq "$$webhookCount" ] 2>/dev/null; then
          echo "Could not determine the webhook count, skipping webhook creation..."
        elif [ $$webhookCount -eq 0 ]; then
          echo "No webhooks found, creating new one..."
          curl \
            -X POST \
            -H "Authorization: Bearer ACAB" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "http://fief-fuckery.what:3000/webhook",
              "events": ["user.created", "user.updated", "user.deleted"]
            }' \
            http://localhost:8000/admin/api/webhooks/ && echo "\n"
        else
          echo "Webhook already exists, skipping creation..."
        fi

        echo "About to get clients..."
        clientsResponse=$(curl -s -H "Accept: application/json" \
                                                 -H "Authorization: Bearer ACAB" \
                                                 http://localhost:8000/admin/api/clients/ || echo "Curl error: $?")
        clientId=$(echo $$clientsResponse | jq -r '.results[0].id')
        echo "Client id: $$clientId"
        curl \
          -X PATCH http://localhost:8000/admin/api/clients/$$clientId \
          -H "Authorization: Bearer ACAB" \
          -H "Content-Type: application/json" \
          -d '{
            "redirect_uris": [
              "http://localhost:3001/auth-callback"
            ]
          }' \
           && echo "\n"

  kafka:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - '9092:9092'
      - '9094:9094'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
volumes:
  kafka_data:
    driver: local
